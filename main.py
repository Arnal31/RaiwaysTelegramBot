import date
import info_filter
import exceptions
import parsedesc
import logging

from Railways_telegramBot import db
from parse import rail_parse
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = ''

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)




@dp.message_handler(commands=['start'])
async def send_welcome(msg):
    await bot.send_message(msg.from_user.id,
                           f'‚úÖ–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, <i>{msg.from_user.first_name}</i>,\n'
                           '‚úÖ–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥–ª—è –≤–∞—Å –±–∏–ª–µ—Ç—ã\n'
                           '‚úÖ–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <i>"–ü—É—Ç—å1" / "–ü—É—Ç—å2 / –î–∞—Ç–∞"</i>\n\n'
                           '‚úÖ<b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:</b> <i>–¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥</i>\n'
                           '‚úÖ<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> "<i>–õ—É–≥–æ–≤–æ–π / –ù—É—Ä-—Å—É–ª—Ç–∞–Ω / 24-02-2020</i>"',
                           parse_mode='HTML')


@dp.message_handler(commands=['desc'])
async def send_description(msg):
    await bot.send_message(msg.from_user.id,
                           '‚úÖ–ß—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>"–ü—É—Ç—å1" / "–ü—É—Ç—å2 / –î–∞—Ç–∞"</i>\n\n'
                           '‚úÖ<b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:</b> <i>–¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥</i>\n'
                           '‚úÖ<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> "<i>–õ—É–≥–æ–≤–æ–π / –ù—É—Ä-—Å—É–ª—Ç–∞–Ω / 24-02-2020</i>"',
                           parse_mode='HTML')


# noinspection PyGlobalUndefined
@dp.message_handler(content_types=['text'])
async def send_railways(message):
    global info

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = message.text.lower().replace(' ', '').split('/')

    # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–¥
    try:
        departure_way = db.select_city_id(text[0])
        arrival_way = db.select_city_id(text[1])
    except IndexError:
        await bot.send_message(message.from_user.id, '‚ùå–û—à–∏–±–∫–∞‚ùå\n–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n'
                                                     '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–≤–æ–¥–µ –≤–≤–µ–¥–∏—Ç–µ /desc')
        return
    except exceptions.RouteError:
        await bot.send_message(message.from_user.id, "‚ùå–û—à–∏–±–∫–∞‚ùå\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return

    # –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç—ã
    try:
        user_date = date.date_correct(text[2])
    except exceptions.DateError:
        await bot.send_message(message.from_user.id, "‚ùå–û—à–∏–±–∫–∞‚ùå\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return
    except exceptions.DateErrorLast:
        await bot.send_message(message.from_user.id, "‚ùå–û—à–∏–±–∫–∞‚ùå\n–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞")
        return

    await bot.send_message(message.from_user.id, "üîé<b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫</b>üîç", parse_mode='HTML')

    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –æ —Ä–µ–π—Å–∞—Ö
    try:
        info = rail_parse.get_block(departure_way, arrival_way, user_date)
    except exceptions.NoTrainError:
        msg = '–í –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–æ–µ–∑–¥–∞ –Ω–µ –µ–∑–¥—è—Ç'
        await bot.send_message(message.from_user.id, msg)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    for ifs in info.text:
        train_list = info_filter.info_filter(ifs)
        markup = types.InlineKeyboardMarkup()
        description = 'desc' + ifs.num
        kb = types.InlineKeyboardButton(text="üì∞–û–ø–∏—Å–∞–Ω–∏—è", callback_data=description)
        markup.add(kb)
        await bot.send_message(message.from_user.id, train_list, parse_mode="HTML", reply_markup=markup)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤
    msg = f'<b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤:</b>{len(info.text)}\n'
    await bot.send_message(message.from_user.id, msg, parse_mode="HTML")

    # –°—Å—ã–ª–∫–∞
    mark = types.InlineKeyboardMarkup()
    mark.add(types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", url=f"{info.url}"))
    await bot.send_message(message.from_user.id,
                           "<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:</b>",
                           parse_mode="HTML",
                           reply_markup=mark)


# noinspection PyGlobalUndefined
@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    global number
    for informations in info.text:
        if call.data == "desc" + informations.num:
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        text='–ü–æ–ª—É—á–∞—é –æ–ø–∏—Å–∞–Ω–∏—è')
            inline_mark_up = types.InlineKeyboardMarkup()
            desc_back = 'desc_back' + informations.num
            kb = types.InlineKeyboardButton(text="‚è™–ù–∞–∑–∞–¥", callback_data=desc_back)
            inline_mark_up.add(kb)
            desc = parsedesc.descparse(informations.num)
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        reply_markup=inline_mark_up,
                                        text=desc)

        elif call.data == 'desc_back' + informations.num:
            back = info_filter.info_filter(informations)
            description = 'desc' + informations.num
            back_markup = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton(text="üì∞–û–ø–∏—Å–∞–Ω–∏—è", callback_data=description)
            back_markup.add(back_button)
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        text=back,
                                        reply_markup=back_markup,
                                        parse_mode='HTML')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
